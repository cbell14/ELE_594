function Conv2DNetwork(N_tv,numClasses,filterSize,numfilters,mEpochs,folds,miniBatchSize,trainDIR,outputDIR)
    order = [];
    SNRdB = [];
    peakSNR = [];
    totalSNR = [];
    
    %% Load Data and Preprocess
    %Load Data
    imds = imageDatastore(trainDIR,'IncludeSubfolders',true,'LabelSource','foldernames');
    labelCount = countEachLabel(imds);
    img = readimage(imds,1);
    image_size = size(img);
    
    %% Build Network
    layers = [
        % sequenceInputLayer([image_size 1])
        imageInputLayer([image_size 1])
        
        convolution2dLayer(filterSize,numfilters,'Padding','same')
        batchNormalizationLayer
        reluLayer
        
        maxPooling2dLayer([1 2],'Stride',[1 2])
        
        convolution2dLayer(filterSize,2*numfilters,'Padding','same')
        batchNormalizationLayer
        reluLayer
        
        maxPooling2dLayer([1 2],'Stride',[1 2])
        
        convolution2dLayer(filterSize,4*numfilters,'Padding','same')
        batchNormalizationLayer
        reluLayer
    
        dropoutLayer
        
        fullyConnectedLayer(numClasses)
        softmaxLayer
        classificationLayer];

    %% Train
    [imds_temp1,imds_temp2,imds_temp3,imds_temp4,imds_temp5] = splitEachLabel(imds,N_tv/folds,N_tv/folds,N_tv/folds,N_tv/folds,N_tv/folds,'randomize');
    
    %fold 1, T=1-4, V=5
    imds_fold1_train = imageDatastore([imds_temp1.Files;imds_temp2.Files;imds_temp3.Files;imds_temp4.Files],'LabelSource','foldernames');
    imds_fold1_val = imageDatastore(imds_temp5.Files,'LabelSource','foldernames');
    
    %fold 2, T=2-5, V=1
    imds_fold2_train = imageDatastore([imds_temp2.Files;imds_temp3.Files;imds_temp4.Files;imds_temp5.Files],'LabelSource','foldernames');
    imds_fold2_val = imageDatastore(imds_temp1.Files,'LabelSource','foldernames');
     
    %fold 3, T=1,3-5, V=2
    imds_fold3_train = imageDatastore([imds_temp1.Files;imds_temp3.Files;imds_temp4.Files;imds_temp5.Files],'LabelSource','foldernames');
    imds_fold3_val = imageDatastore(imds_temp2.Files,'LabelSource','foldernames');
    
    %fold 4, T=1-2,4-5, V=3
    imds_fold4_train = imageDatastore([imds_temp1.Files;imds_temp2.Files;imds_temp4.Files;imds_temp5.Files],'LabelSource','foldernames');
    imds_fold4_val = imageDatastore(imds_temp3.Files,'LabelSource','foldernames');
    
    %fold 5, T=1-3,5, V=4
    imds_fold5_train = imageDatastore([imds_temp1.Files;imds_temp2.Files;imds_temp3.Files;imds_temp5.Files],'LabelSource','foldernames');
    imds_fold5_val = imageDatastore(imds_temp4.Files,'LabelSource','foldernames');
    
    options1 = trainingOptions('adam',...
        MiniBatchSize=miniBatchSize,...
        MaxEpochs=mEpochs,...
        SequencePaddingDirection='left',...
        ValidationData=imds_fold1_val,...
        Plots='training-progress',...
        Shuffle='once',...
        ExecutionEnvironment='gpu',...
        Verbose=0);
    [net(1), info(1)] = trainNetwork(imds_fold1_train,layers,options1);
    delete(findall(0));

    options2 = trainingOptions('adam',...
        MiniBatchSize=miniBatchSize,...
        MaxEpochs=mEpochs,...
        SequencePaddingDirection='left',...
        ValidationData=imds_fold2_val,...
        Plots='training-progress',...
        Shuffle='once',...
        ExecutionEnvironment='gpu',...
        Verbose=0);
    [net(2), info(2)] = trainNetwork(imds_fold2_train,layers,options2);
    delete(findall(0));

    options3 = trainingOptions('adam',...
        MiniBatchSize=miniBatchSize,...
        MaxEpochs=mEpochs,...
        SequencePaddingDirection='left',...
        ValidationData=imds_fold3_val,...
        Plots='training-progress',...
        Shuffle='once',...
        ExecutionEnvironment='gpu',...
        Verbose=0);
    [net(3), info(3)] = trainNetwork(imds_fold3_train,layers,options3);
    delete(findall(0));

    options4 = trainingOptions('adam',...
        MiniBatchSize=miniBatchSize,...
        MaxEpochs=mEpochs,...
        SequencePaddingDirection='left',...
        ValidationData=imds_fold4_val,...
        Plots='training-progress',...
        Shuffle='once',...
        ExecutionEnvironment='gpu',...
        Verbose=0);
    [net(4), info(4)] = trainNetwork(imds_fold4_train,layers,options4);
    delete(findall(0));

    options5 = trainingOptions('adam',...
        MiniBatchSize=miniBatchSize,...
        MaxEpochs=mEpochs,...
        SequencePaddingDirection='left',...
        ValidationData=imds_fold5_val,...
        Plots='training-progress',...
        Shuffle='once',...
        ExecutionEnvironment='gpu',...
        Verbose=0);
    [net(5), info(5)] = trainNetwork(imds_fold5_train,layers,options5);
    delete(findall(0));
    
    %calc k fold CV statistics
    for ii=1:1:folds
        CV.acc(ii) = info(ii).FinalValidationAccuracy;
    end
    CV.acc_mean = mean(CV.acc);
    CV.acc_std = std(CV.acc);
    
    % Save Network and Info
    save([outputDIR,'\2DConvNetwork.mat'],'net','info','CV')
end